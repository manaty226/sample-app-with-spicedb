// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"github.com/manaty226/sample-app-with-spicedb/internal/entity"
	"github.com/manaty226/sample-app-with-spicedb/internal/service"
	"sync"
)

// Ensure, that AddBlogServiceMock does implement AddBlogService.
// If this is not the case, regenerate this file with moq.
var _ AddBlogService = &AddBlogServiceMock{}

// AddBlogServiceMock is a mock implementation of AddBlogService.
//
// 	func TestSomethingThatUsesAddBlogService(t *testing.T) {
//
// 		// make and configure a mocked AddBlogService
// 		mockedAddBlogService := &AddBlogServiceMock{
// 			AddBlogFunc: func(title string, content string) (*entity.Blog, error) {
// 				panic("mock out the AddBlog method")
// 			},
// 		}
//
// 		// use mockedAddBlogService in code that requires AddBlogService
// 		// and then make assertions.
//
// 	}
type AddBlogServiceMock struct {
	// AddBlogFunc mocks the AddBlog method.
	AddBlogFunc func(title string, content string) (*entity.Blog, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddBlog holds details about calls to the AddBlog method.
		AddBlog []struct {
			// Title is the title argument value.
			Title string
			// Content is the content argument value.
			Content string
		}
	}
	lockAddBlog sync.RWMutex
}

// AddBlog calls AddBlogFunc.
func (mock *AddBlogServiceMock) AddBlog(title string, content string) (*entity.Blog, error) {
	if mock.AddBlogFunc == nil {
		panic("AddBlogServiceMock.AddBlogFunc: method is nil but AddBlogService.AddBlog was just called")
	}
	callInfo := struct {
		Title   string
		Content string
	}{
		Title:   title,
		Content: content,
	}
	mock.lockAddBlog.Lock()
	mock.calls.AddBlog = append(mock.calls.AddBlog, callInfo)
	mock.lockAddBlog.Unlock()
	return mock.AddBlogFunc(title, content)
}

// AddBlogCalls gets all the calls that were made to AddBlog.
// Check the length with:
//     len(mockedAddBlogService.AddBlogCalls())
func (mock *AddBlogServiceMock) AddBlogCalls() []struct {
	Title   string
	Content string
} {
	var calls []struct {
		Title   string
		Content string
	}
	mock.lockAddBlog.RLock()
	calls = mock.calls.AddBlog
	mock.lockAddBlog.RUnlock()
	return calls
}

// Ensure, that GetBlogServiceMock does implement GetBlogService.
// If this is not the case, regenerate this file with moq.
var _ GetBlogService = &GetBlogServiceMock{}

// GetBlogServiceMock is a mock implementation of GetBlogService.
//
// 	func TestSomethingThatUsesGetBlogService(t *testing.T) {
//
// 		// make and configure a mocked GetBlogService
// 		mockedGetBlogService := &GetBlogServiceMock{
// 			GetBlogFunc: func(id int) (*entity.Blog, error) {
// 				panic("mock out the GetBlog method")
// 			},
// 		}
//
// 		// use mockedGetBlogService in code that requires GetBlogService
// 		// and then make assertions.
//
// 	}
type GetBlogServiceMock struct {
	// GetBlogFunc mocks the GetBlog method.
	GetBlogFunc func(id int) (*entity.Blog, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetBlog holds details about calls to the GetBlog method.
		GetBlog []struct {
			// ID is the id argument value.
			ID int
		}
	}
	lockGetBlog sync.RWMutex
}

// GetBlog calls GetBlogFunc.
func (mock *GetBlogServiceMock) GetBlog(id int) (*entity.Blog, error) {
	if mock.GetBlogFunc == nil {
		panic("GetBlogServiceMock.GetBlogFunc: method is nil but GetBlogService.GetBlog was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetBlog.Lock()
	mock.calls.GetBlog = append(mock.calls.GetBlog, callInfo)
	mock.lockGetBlog.Unlock()
	return mock.GetBlogFunc(id)
}

// GetBlogCalls gets all the calls that were made to GetBlog.
// Check the length with:
//     len(mockedGetBlogService.GetBlogCalls())
func (mock *GetBlogServiceMock) GetBlogCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetBlog.RLock()
	calls = mock.calls.GetBlog
	mock.lockGetBlog.RUnlock()
	return calls
}

// Ensure, that UpdateBlogServiceMock does implement UpdateBlogService.
// If this is not the case, regenerate this file with moq.
var _ UpdateBlogService = &UpdateBlogServiceMock{}

// UpdateBlogServiceMock is a mock implementation of UpdateBlogService.
//
// 	func TestSomethingThatUsesUpdateBlogService(t *testing.T) {
//
// 		// make and configure a mocked UpdateBlogService
// 		mockedUpdateBlogService := &UpdateBlogServiceMock{
// 			UpdateBlogFunc: func(id int, title string, content string) (*entity.Blog, error) {
// 				panic("mock out the UpdateBlog method")
// 			},
// 		}
//
// 		// use mockedUpdateBlogService in code that requires UpdateBlogService
// 		// and then make assertions.
//
// 	}
type UpdateBlogServiceMock struct {
	// UpdateBlogFunc mocks the UpdateBlog method.
	UpdateBlogFunc func(id int, title string, content string) (*entity.Blog, error)

	// calls tracks calls to the methods.
	calls struct {
		// UpdateBlog holds details about calls to the UpdateBlog method.
		UpdateBlog []struct {
			// ID is the id argument value.
			ID int
			// Title is the title argument value.
			Title string
			// Content is the content argument value.
			Content string
		}
	}
	lockUpdateBlog sync.RWMutex
}

// UpdateBlog calls UpdateBlogFunc.
func (mock *UpdateBlogServiceMock) UpdateBlog(id int, title string, content string) (*entity.Blog, error) {
	if mock.UpdateBlogFunc == nil {
		panic("UpdateBlogServiceMock.UpdateBlogFunc: method is nil but UpdateBlogService.UpdateBlog was just called")
	}
	callInfo := struct {
		ID      int
		Title   string
		Content string
	}{
		ID:      id,
		Title:   title,
		Content: content,
	}
	mock.lockUpdateBlog.Lock()
	mock.calls.UpdateBlog = append(mock.calls.UpdateBlog, callInfo)
	mock.lockUpdateBlog.Unlock()
	return mock.UpdateBlogFunc(id, title, content)
}

// UpdateBlogCalls gets all the calls that were made to UpdateBlog.
// Check the length with:
//     len(mockedUpdateBlogService.UpdateBlogCalls())
func (mock *UpdateBlogServiceMock) UpdateBlogCalls() []struct {
	ID      int
	Title   string
	Content string
} {
	var calls []struct {
		ID      int
		Title   string
		Content string
	}
	mock.lockUpdateBlog.RLock()
	calls = mock.calls.UpdateBlog
	mock.lockUpdateBlog.RUnlock()
	return calls
}

// Ensure, that AuthorizerMock does implement Authorizer.
// If this is not the case, regenerate this file with moq.
var _ Authorizer = &AuthorizerMock{}

// AuthorizerMock is a mock implementation of Authorizer.
//
// 	func TestSomethingThatUsesAuthorizer(t *testing.T) {
//
// 		// make and configure a mocked Authorizer
// 		mockedAuthorizer := &AuthorizerMock{
// 			CheckPermissionFunc: func(objectType string, objectId string, user string, method service.Method) (bool, error) {
// 				panic("mock out the CheckPermission method")
// 			},
// 			CreateUserPermissionFunc: func(objectType string, objectId string, user string, relation string) error {
// 				panic("mock out the CreateUserPermission method")
// 			},
// 		}
//
// 		// use mockedAuthorizer in code that requires Authorizer
// 		// and then make assertions.
//
// 	}
type AuthorizerMock struct {
	// CheckPermissionFunc mocks the CheckPermission method.
	CheckPermissionFunc func(objectType string, objectId string, user string, method service.Method) (bool, error)

	// CreateUserPermissionFunc mocks the CreateUserPermission method.
	CreateUserPermissionFunc func(objectType string, objectId string, user string, relation string) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckPermission holds details about calls to the CheckPermission method.
		CheckPermission []struct {
			// ObjectType is the objectType argument value.
			ObjectType string
			// ObjectId is the objectId argument value.
			ObjectId string
			// User is the user argument value.
			User string
			// Method is the method argument value.
			Method service.Method
		}
		// CreateUserPermission holds details about calls to the CreateUserPermission method.
		CreateUserPermission []struct {
			// ObjectType is the objectType argument value.
			ObjectType string
			// ObjectId is the objectId argument value.
			ObjectId string
			// User is the user argument value.
			User string
			// Relation is the relation argument value.
			Relation string
		}
	}
	lockCheckPermission      sync.RWMutex
	lockCreateUserPermission sync.RWMutex
}

// CheckPermission calls CheckPermissionFunc.
func (mock *AuthorizerMock) CheckPermission(objectType string, objectId string, user string, method service.Method) (bool, error) {
	if mock.CheckPermissionFunc == nil {
		panic("AuthorizerMock.CheckPermissionFunc: method is nil but Authorizer.CheckPermission was just called")
	}
	callInfo := struct {
		ObjectType string
		ObjectId   string
		User       string
		Method     service.Method
	}{
		ObjectType: objectType,
		ObjectId:   objectId,
		User:       user,
		Method:     method,
	}
	mock.lockCheckPermission.Lock()
	mock.calls.CheckPermission = append(mock.calls.CheckPermission, callInfo)
	mock.lockCheckPermission.Unlock()
	return mock.CheckPermissionFunc(objectType, objectId, user, method)
}

// CheckPermissionCalls gets all the calls that were made to CheckPermission.
// Check the length with:
//     len(mockedAuthorizer.CheckPermissionCalls())
func (mock *AuthorizerMock) CheckPermissionCalls() []struct {
	ObjectType string
	ObjectId   string
	User       string
	Method     service.Method
} {
	var calls []struct {
		ObjectType string
		ObjectId   string
		User       string
		Method     service.Method
	}
	mock.lockCheckPermission.RLock()
	calls = mock.calls.CheckPermission
	mock.lockCheckPermission.RUnlock()
	return calls
}

// CreateUserPermission calls CreateUserPermissionFunc.
func (mock *AuthorizerMock) CreateUserPermission(objectType string, objectId string, user string, relation string) error {
	if mock.CreateUserPermissionFunc == nil {
		panic("AuthorizerMock.CreateUserPermissionFunc: method is nil but Authorizer.CreateUserPermission was just called")
	}
	callInfo := struct {
		ObjectType string
		ObjectId   string
		User       string
		Relation   string
	}{
		ObjectType: objectType,
		ObjectId:   objectId,
		User:       user,
		Relation:   relation,
	}
	mock.lockCreateUserPermission.Lock()
	mock.calls.CreateUserPermission = append(mock.calls.CreateUserPermission, callInfo)
	mock.lockCreateUserPermission.Unlock()
	return mock.CreateUserPermissionFunc(objectType, objectId, user, relation)
}

// CreateUserPermissionCalls gets all the calls that were made to CreateUserPermission.
// Check the length with:
//     len(mockedAuthorizer.CreateUserPermissionCalls())
func (mock *AuthorizerMock) CreateUserPermissionCalls() []struct {
	ObjectType string
	ObjectId   string
	User       string
	Relation   string
} {
	var calls []struct {
		ObjectType string
		ObjectId   string
		User       string
		Relation   string
	}
	mock.lockCreateUserPermission.RLock()
	calls = mock.calls.CreateUserPermission
	mock.lockCreateUserPermission.RUnlock()
	return calls
}
